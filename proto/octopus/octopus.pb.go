//
// Copyright (c) 2023 Cloudflare, Inc.
//
// Licensed under Apache 2.0 license found in the LICENSE file
// or at http://www.apache.org/licenses/LICENSE-2.0
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.12.4
// source: octopus.proto

package octopus

import (
	api "github.com/bio-routing/bio-rd/net/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CableEndpointType int32

const (
	CableEndpointType_CABLE_ENDPOINT_TYPE_UNSPECIFIED         CableEndpointType = 0
	CableEndpointType_CABLE_ENDPOINT_TYPE_INTERFACE           CableEndpointType = 1
	CableEndpointType_CABLE_ENDPOINT_TYPE_FRONT_PORT          CableEndpointType = 2
	CableEndpointType_CABLE_ENDPOINT_TYPE_REAR_PORT           CableEndpointType = 3
	CableEndpointType_CABLE_ENDPOINT_TYPE_CIRCUIT_TERMINATION CableEndpointType = 4
)

// Enum value maps for CableEndpointType.
var (
	CableEndpointType_name = map[int32]string{
		0: "CABLE_ENDPOINT_TYPE_UNSPECIFIED",
		1: "CABLE_ENDPOINT_TYPE_INTERFACE",
		2: "CABLE_ENDPOINT_TYPE_FRONT_PORT",
		3: "CABLE_ENDPOINT_TYPE_REAR_PORT",
		4: "CABLE_ENDPOINT_TYPE_CIRCUIT_TERMINATION",
	}
	CableEndpointType_value = map[string]int32{
		"CABLE_ENDPOINT_TYPE_UNSPECIFIED":         0,
		"CABLE_ENDPOINT_TYPE_INTERFACE":           1,
		"CABLE_ENDPOINT_TYPE_FRONT_PORT":          2,
		"CABLE_ENDPOINT_TYPE_REAR_PORT":           3,
		"CABLE_ENDPOINT_TYPE_CIRCUIT_TERMINATION": 4,
	}
)

func (x CableEndpointType) Enum() *CableEndpointType {
	p := new(CableEndpointType)
	*p = x
	return p
}

func (x CableEndpointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CableEndpointType) Descriptor() protoreflect.EnumDescriptor {
	return file_octopus_proto_enumTypes[0].Descriptor()
}

func (CableEndpointType) Type() protoreflect.EnumType {
	return &file_octopus_proto_enumTypes[0]
}

func (x CableEndpointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CableEndpointType.Descriptor instead.
func (CableEndpointType) EnumDescriptor() ([]byte, []int) {
	return file_octopus_proto_rawDescGZIP(), []int{0}
}

//
// Messages for data types
type Topology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64     `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Sites     []*Site    `protobuf:"bytes,2,rep,name=sites,proto3" json:"sites,omitempty"`
	Pops      []*Pop     `protobuf:"bytes,3,rep,name=pops,proto3" json:"pops,omitempty"`
	Colos     []*Colo    `protobuf:"bytes,4,rep,name=colos,proto3" json:"colos,omitempty"`
	Devices   []*Device  `protobuf:"bytes,5,rep,name=devices,proto3" json:"devices,omitempty"`
	Cables    []*Cable   `protobuf:"bytes,6,rep,name=cables,proto3" json:"cables,omitempty"`
	Prefixes  []*Prefix  `protobuf:"bytes,7,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	Circuits  []*Circuit `protobuf:"bytes,8,rep,name=circuits,proto3" json:"circuits,omitempty"`
}

func (x *Topology) Reset() {
	*x = Topology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_octopus_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topology) ProtoMessage() {}

func (x *Topology) ProtoReflect() protoreflect.Message {
	mi := &file_octopus_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topology.ProtoReflect.Descriptor instead.
func (*Topology) Descriptor() ([]byte, []int) {
	return file_octopus_proto_rawDescGZIP(), []int{0}
}

func (x *Topology) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Topology) GetSites() []*Site {
	if x != nil {
		return x.Sites
	}
	return nil
}

func (x *Topology) GetPops() []*Pop {
	if x != nil {
		return x.Pops
	}
	return nil
}

func (x *Topology) GetColos() []*Colo {
	if x != nil {
		return x.Colos
	}
	return nil
}

func (x *Topology) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *Topology) GetCables() []*Cable {
	if x != nil {
		return x.Cables
	}
	return nil
}

func (x *Topology) GetPrefixes() []*Prefix {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *Topology) GetCircuits() []*Circuit {
	if x != nil {
		return x.Circuits
	}
	return nil
}

type Site struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Site) Reset() {
	*x = Site{}
	if protoimpl.UnsafeEnabled {
		mi := &file_octopus_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Site) ProtoMessage() {}

func (x *Site) ProtoReflect() protoreflect.Message {
	mi := &file_octopus_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Site.ProtoReflect.Descriptor instead.
func (*Site) Descriptor() ([]byte, []int) {
	return file_octopus_proto_rawDescGZIP(), []int{1}
}

func (x *Site) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Pop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Pop) Reset() {
	*x = Pop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_octopus_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pop) ProtoMessage() {}

func (x *Pop) ProtoReflect() protoreflect.Message {
	mi := &file_octopus_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pop.ProtoReflect.Descriptor instead.
func (*Pop) Descriptor() ([]byte, []int) {
	return file_octopus_proto_rawDescGZIP(), []int{2}
}

func (x *Pop) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Colo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status    string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"` // enum?
	Region    string   `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	Tier      uint32   `protobuf:"varint,5,opt,name=tier,proto3" json:"tier,omitempty"`
	Animal    string   `protobuf:"bytes,6,opt,name=animal,proto3" json:"animal,omitempty"`
	IsMcp     bool     `protobuf:"varint,7,opt,name=is_mcp,json=isMcp,proto3" json:"is_mcp,omitempty"`
	IsFedramp bool     `protobuf:"varint,8,opt,name=is_fedramp,json=isFedramp,proto3" json:"is_fedramp,omitempty"`
	Pop       string   `protobuf:"bytes,9,opt,name=pop,proto3" json:"pop,omitempty"`
	Sites     []string `protobuf:"bytes,10,rep,name=sites,proto3" json:"sites,omitempty"`
}

func (x *Colo) Reset() {
	*x = Colo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_octopus_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Colo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Colo) ProtoMessage() {}

func (x *Colo) ProtoReflect() protoreflect.Message {
	mi := &file_octopus_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Colo.ProtoReflect.Descriptor instead.
func (*Colo) Descriptor() ([]byte, []int) {
	return file_octopus_proto_rawDescGZIP(), []int{3}
}

func (x *Colo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Colo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Colo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Colo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Colo) GetTier() uint32 {
	if x != nil {
		return x.Tier
	}
	return 0
}

func (x *Colo) GetAnimal() string {
	if x != nil {
		return x.Animal
	}
	return ""
}

func (x *Colo) GetIsMcp() bool {
	if x != nil {
		return x.IsMcp
	}
	return false
}

func (x *Colo) GetIsFedramp() bool {
	if x != nil {
		return x.IsFedramp
	}
	return false
}

func (x *Colo) GetPop() string {
	if x != nil {
		return x.Pop
	}
	return ""
}

func (x *Colo) GetSites() []string {
	if x != nil {
		return x.Sites
	}
	return nil
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status     string       `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Role       string       `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	Platform   string       `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
	ColoId     int32        `protobuf:"varint,5,opt,name=colo_id,json=coloId,proto3" json:"colo_id,omitempty"`
	SiteName   string       `protobuf:"bytes,6,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	Interfaces []*Interface `protobuf:"bytes,7,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	FrontPorts []*FrontPort `protobuf:"bytes,8,rep,name=front_ports,json=frontPorts,proto3" json:"front_ports,omitempty"`
	RearPorts  []*RearPort  `protobuf:"bytes,9,rep,name=rear_ports,json=rearPorts,proto3" json:"rear_ports,omitempty"`
	DeviceType string       `protobuf:"bytes,11,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	MetaData   *MetaData    `protobuf:"bytes,12,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_octopus_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_octopus_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_octopus_proto_rawDescGZIP(), []int{4}
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Device) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Device) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *Device) GetColoId() int32 {
	if x != nil {
		return x.ColoId
	}
	return 0
}

func (x *Device) GetSiteName() string {
	if x != nil {
		return x.SiteName
	}
	return ""
}

func (x *Device) GetInterfaces() []*Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *Device) GetFrontPorts() []*FrontPort {
	if x != nil {
		return x.FrontPorts
	}
	return nil
}

func (x *Device) GetRearPorts() []*RearPort {
	if x != nil {
		return x.RearPorts
	}
	return nil
}

func (x *Device) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *Device) GetMetaData() *MetaData {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Units       []*InterfaceUnit `protobuf:"bytes,2,rep,name=units,proto3" json:"units,omitempty"`
	LagMemberOf string           `protobuf:"bytes,3,opt,name=lag_member_of,json=lagMemberOf,proto3" json:"lag_member_of,omitempty"`
	Type        string           `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	MetaData    *MetaData        `protobuf:"bytes,6,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
}

func (x *Interface) Reset() {
	*x = Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_octopus_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_octopus_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_octopus_proto_rawDescGZIP(), []int{5}
}

func (x *Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Interface) GetUnits() []*InterfaceUnit {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *Interface) GetLagMemberOf() string {
	if x != nil {
		return x.LagMemberOf
	}
	return ""
}

func (x *Interface) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Interface) GetMetaData() *MetaData {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type FrontPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RearPort         string `protobuf:"bytes,2,opt,name=rear_port,json=rearPort,proto3" json:"rear_port,omitempty"`
	RearPortPosition uint32 `protobuf:"varint,3,opt,name=rear_port_position,json=rearPortPosition,proto3" json:"rear_port_position,omitempty"`
}

func (x *FrontPort) Reset() {
	*x = FrontPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_octopus_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrontPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrontPort) ProtoMessage() {}

func (x *FrontPort) ProtoReflect() protoreflect.Message {
	mi := &file_octopus_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrontPort.ProtoReflect.Descriptor instead.
func (*FrontPort) Descriptor() ([]byte, []int) {
	return file_octopus_proto_rawDescGZIP(), []int{6}
}

func (x *FrontPort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FrontPort) GetRearPort() string {
	if x != nil {
		return x.RearPort
	}
	return ""
}

func (x *FrontPort) GetRearPortPosition() uint32 {
	if x != nil {
		return x.RearPortPosition
	}
	return 0
}

type RearPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Positions uint32 `protobuf:"varint,2,opt,name=positions,proto3" json:"positions,omitempty"`
}

func (x *RearPort) Reset() {
	*x = RearPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_octopus_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RearPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RearPort) ProtoMessage() {}

func (x *RearPort) ProtoReflect() protoreflect.Message {
	mi := &file_octopus_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RearPort.ProtoReflect.Descriptor instead.
func (*RearPort) Descriptor() ([]byte, []int) {
	return file_octopus_proto_rawDescGZIP(), []int{7}
}

func (x *RearPort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RearPort) GetPositions() uint32 {
	if x != nil {
		return x.Positions
	}
	return 0
}

type InterfaceUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The unit ID MAY refer to a VLAN ID if 802.1q or 802.1ad tagging is used (and will contain the same value as the inner_tag is so).
	//For some interface types (GRE tunnels for example), the ID does NOT reflect a VLAN ID.
	Id            uint32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ipv4Addresses []*IPAddress `protobuf:"bytes,2,rep,name=ipv4_addresses,json=ipv4Addresses,proto3" json:"ipv4_addresses,omitempty"`
	Ipv6Addresses []*IPAddress `protobuf:"bytes,3,rep,name=ipv6_addresses,json=ipv6Addresses,proto3" json:"ipv6_addresses,omitempty"`
	OuterTag      uint32       `protobuf:"varint,5,opt,name=outer_tag,json=outerTag,proto3" json:"outer_tag,omitempty"`
	InnerTag      uint32       `protobuf:"varint,6,opt,name=inner_tag,json=innerTag,proto3" json:"inner_tag,omitempty"`
	MetaData      *MetaData    `protobuf:"bytes,7,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
}

func (x *InterfaceUnit) Reset() {
	*x = InterfaceUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_octopus_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceUnit) ProtoMessage() {}

func (x *InterfaceUnit) ProtoReflect() protoreflect.Message {
	mi := &file_octopus_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceUnit.ProtoReflect.Descriptor instead.
func (*InterfaceUnit) Descriptor() ([]byte, []int) {
	return file_octopus_proto_rawDescGZIP(), []int{8}
}

func (x *InterfaceUnit) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InterfaceUnit) GetIpv4Addresses() []*IPAddress {
	if x != nil {
		return x.Ipv4Addresses
	}
	return nil
}

func (x *InterfaceUnit) GetIpv6Addresses() []*IPAddress {
	if x != nil {
		return x.Ipv6Addresses
	}
	return nil
}

func (x *InterfaceUnit) GetOuterTag() uint32 {
	if x != nil {
		return x.OuterTag
	}
	return 0
}

func (x *InterfaceUnit) GetInnerTag() uint32 {
	if x != nil {
		return x.InnerTag
	}
	return 0
}

func (x *InterfaceUnit) GetMetaData() *MetaData {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type IPAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IP       *api.Prefix `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	MetaData *MetaData   `protobuf:"bytes,2,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
}

func (x *IPAddress) Reset() {
	*x = IPAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_octopus_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAddress) ProtoMessage() {}

func (x *IPAddress) ProtoReflect() protoreflect.Message {
	mi := &file_octopus_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAddress.ProtoReflect.Descriptor instead.
func (*IPAddress) Descriptor() ([]byte, []int) {
	return file_octopus_proto_rawDescGZIP(), []int{9}
}

func (x *IPAddress) GetIP() *api.Prefix {
	if x != nil {
		return x.IP
	}
	return nil
}

func (x *IPAddress) GetMetaData() *MetaData {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type Circuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid      string    `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Provider string    `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	Type     string    `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Status   string    `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	MetaData *MetaData `protobuf:"bytes,6,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
}

func (x *Circuit) Reset() {
	*x = Circuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_octopus_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Circuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Circuit) ProtoMessage() {}

func (x *Circuit) ProtoReflect() protoreflect.Message {
	mi := &file_octopus_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Circuit.ProtoReflect.Descriptor instead.
func (*Circuit) Descriptor() ([]byte, []int) {
	return file_octopus_proto_rawDescGZIP(), []int{10}
}

func (x *Circuit) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *Circuit) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Circuit) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Circuit) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Circuit) GetMetaData() *MetaData {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type Cable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AEnd *CableEnd `protobuf:"bytes,1,opt,name=a_end,json=aEnd,proto3" json:"a_end,omitempty"`
	BEnd *CableEnd `protobuf:"bytes,2,opt,name=b_end,json=bEnd,proto3" json:"b_end,omitempty"`
}

func (x *Cable) Reset() {
	*x = Cable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_octopus_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cable) ProtoMessage() {}

func (x *Cable) ProtoReflect() protoreflect.Message {
	mi := &file_octopus_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cable.ProtoReflect.Descriptor instead.
func (*Cable) Descriptor() ([]byte, []int) {
	return file_octopus_proto_rawDescGZIP(), []int{11}
}

func (x *Cable) GetAEnd() *CableEnd {
	if x != nil {
		return x.AEnd
	}
	return nil
}

func (x *Cable) GetBEnd() *CableEnd {
	if x != nil {
		return x.BEnd
	}
	return nil
}

type CableEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceName   string            `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	EndpointType CableEndpointType `protobuf:"varint,2,opt,name=endpoint_type,json=endpointType,proto3,enum=cloudflare.net.octopus.CableEndpointType" json:"endpoint_type,omitempty"`
	EndpointName string            `protobuf:"bytes,3,opt,name=endpoint_name,json=endpointName,proto3" json:"endpoint_name,omitempty"`
}

func (x *CableEnd) Reset() {
	*x = CableEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_octopus_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CableEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CableEnd) ProtoMessage() {}

func (x *CableEnd) ProtoReflect() protoreflect.Message {
	mi := &file_octopus_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CableEnd.ProtoReflect.Descriptor instead.
func (*CableEnd) Descriptor() ([]byte, []int) {
	return file_octopus_proto_rawDescGZIP(), []int{12}
}

func (x *CableEnd) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *CableEnd) GetEndpointType() CableEndpointType {
	if x != nil {
		return x.EndpointType
	}
	return CableEndpointType_CABLE_ENDPOINT_TYPE_UNSPECIFIED
}

func (x *CableEnd) GetEndpointName() string {
	if x != nil {
		return x.EndpointName
	}
	return ""
}

type Prefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix   *api.Prefix `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	MetaData *MetaData   `protobuf:"bytes,4,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
}

func (x *Prefix) Reset() {
	*x = Prefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_octopus_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prefix) ProtoMessage() {}

func (x *Prefix) ProtoReflect() protoreflect.Message {
	mi := &file_octopus_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prefix.ProtoReflect.Descriptor instead.
func (*Prefix) Descriptor() ([]byte, []int) {
	return file_octopus_proto_rawDescGZIP(), []int{13}
}

func (x *Prefix) GetPrefix() *api.Prefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *Prefix) GetMetaData() *MetaData {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type MetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags            []string          `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	SemanticTags    map[string]string `protobuf:"bytes,2,rep,name=semantic_tags,json=semanticTags,proto3" json:"semantic_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CustomFieldData string            `protobuf:"bytes,3,opt,name=custom_field_data,json=customFieldData,proto3" json:"custom_field_data,omitempty"`
}

func (x *MetaData) Reset() {
	*x = MetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_octopus_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaData) ProtoMessage() {}

func (x *MetaData) ProtoReflect() protoreflect.Message {
	mi := &file_octopus_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaData.ProtoReflect.Descriptor instead.
func (*MetaData) Descriptor() ([]byte, []int) {
	return file_octopus_proto_rawDescGZIP(), []int{14}
}

func (x *MetaData) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *MetaData) GetSemanticTags() map[string]string {
	if x != nil {
		return x.SemanticTags
	}
	return nil
}

func (x *MetaData) GetCustomFieldData() string {
	if x != nil {
		return x.CustomFieldData
	}
	return ""
}

//
// Services and related messages
type TopologyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TopologyRequest) Reset() {
	*x = TopologyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_octopus_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyRequest) ProtoMessage() {}

func (x *TopologyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_octopus_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyRequest.ProtoReflect.Descriptor instead.
func (*TopologyRequest) Descriptor() ([]byte, []int) {
	return file_octopus_proto_rawDescGZIP(), []int{15}
}

type TopologyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topology *Topology `protobuf:"bytes,1,opt,name=topology,proto3" json:"topology,omitempty"`
}

func (x *TopologyResponse) Reset() {
	*x = TopologyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_octopus_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyResponse) ProtoMessage() {}

func (x *TopologyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_octopus_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyResponse.ProtoReflect.Descriptor instead.
func (*TopologyResponse) Descriptor() ([]byte, []int) {
	return file_octopus_proto_rawDescGZIP(), []int{16}
}

func (x *TopologyResponse) GetTopology() *Topology {
	if x != nil {
		return x.Topology
	}
	return nil
}

type DeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceName string `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
}

func (x *DeviceRequest) Reset() {
	*x = DeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_octopus_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRequest) ProtoMessage() {}

func (x *DeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_octopus_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRequest.ProtoReflect.Descriptor instead.
func (*DeviceRequest) Descriptor() ([]byte, []int) {
	return file_octopus_proto_rawDescGZIP(), []int{17}
}

func (x *DeviceRequest) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type DeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *DeviceResponse) Reset() {
	*x = DeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_octopus_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceResponse) ProtoMessage() {}

func (x *DeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_octopus_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceResponse.ProtoReflect.Descriptor instead.
func (*DeviceResponse) Descriptor() ([]byte, []int) {
	return file_octopus_proto_rawDescGZIP(), []int{18}
}

func (x *DeviceResponse) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

var File_octopus_proto protoreflect.FileDescriptor

var file_octopus_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x16, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2e,
	0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75, 0x73, 0x1a, 0x11, 0x6e, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x03, 0x0a, 0x08, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72,
	0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75, 0x73, 0x2e, 0x53, 0x69,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x6f, 0x70,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66,
	0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75, 0x73,
	0x2e, 0x50, 0x6f, 0x70, 0x52, 0x04, 0x70, 0x6f, 0x70, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x6f, 0x63, 0x74, 0x6f, 0x70,
	0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x73, 0x12, 0x38,
	0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x65, 0x74,
	0x2e, 0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75,
	0x73, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x3a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e,
	0x65, 0x74, 0x2e, 0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x63,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x6f,
	0x63, 0x74, 0x6f, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x52, 0x08,
	0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x73, 0x22, 0x1a, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x19, 0x0a, 0x03, 0x50, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xe4, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x6c, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6d,
	0x63, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4d, 0x63, 0x70, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x66, 0x65, 0x64, 0x72, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x46, 0x65, 0x64, 0x72, 0x61, 0x6d, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6f, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0x22, 0xc8, 0x03, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x6f, 0x6c, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x63, 0x6f, 0x6c, 0x6f, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66,
	0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x6f, 0x63, 0x74,
	0x6f, 0x70, 0x75, 0x73, 0x2e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0a,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x72, 0x65,
	0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2e,
	0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x09, 0x72, 0x65, 0x61, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x09,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x65, 0x74,
	0x2e, 0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x0a, 0x10,
	0x0b, 0x22, 0xd9, 0x01, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e,
	0x6e, 0x65, 0x74, 0x2e, 0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x67, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x67, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x6f, 0x63, 0x74,
	0x6f, 0x70, 0x75, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x6a, 0x0a,
	0x09, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x61, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x08, 0x52, 0x65, 0x61,
	0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb2, 0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0e, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e,
	0x65, 0x74, 0x2e, 0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75, 0x73, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x6f, 0x63, 0x74,
	0x6f, 0x70, 0x75, 0x73, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d,
	0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x67, 0x12, 0x3d, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x6f, 0x63, 0x74, 0x6f,
	0x70, 0x75, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x6b, 0x0a, 0x09,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x02, 0x49, 0x50, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x02, 0x49, 0x50, 0x12, 0x3d, 0x0a, 0x09, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x6f,
	0x63, 0x74, 0x6f, 0x70, 0x75, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa8, 0x01, 0x0a, 0x07, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3d, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e,
	0x6e, 0x65, 0x74, 0x2e, 0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x04,
	0x08, 0x05, 0x10, 0x06, 0x22, 0x75, 0x0a, 0x05, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a,
	0x05, 0x61, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x6f, 0x63,
	0x74, 0x6f, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x04,
	0x61, 0x45, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x62, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65,
	0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x04, 0x62, 0x45, 0x6e, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x08,
	0x43, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x65,
	0x74, 0x2e, 0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75, 0x73, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7c,
	0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x69, 0x6f, 0x2e, 0x6e,
	0x65, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x3d, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72,
	0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xe4, 0x01, 0x0a,
	0x08, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x57, 0x0a,
	0x0d, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72,
	0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x63, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x11, 0x0a, 0x0f, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x10, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x6f, 0x63,
	0x74, 0x6f, 0x70, 0x75, 0x73, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x08,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x22, 0x30, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x0e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x6f, 0x63,
	0x74, 0x6f, 0x70, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2a, 0xcf, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x1d, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x41, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x32, 0xd2, 0x01, 0x0a, 0x0e, 0x4f, 0x63, 0x74, 0x6f, 0x70,
	0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75,
	0x73, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e,
	0x65, 0x74, 0x2e, 0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75, 0x73, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x6f, 0x63, 0x74, 0x6f,
	0x70, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2e, 0x6e,
	0x65, 0x74, 0x2e, 0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2d, 0x5a, 0x2b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66,
	0x6c, 0x61, 0x72, 0x65, 0x2f, 0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x6f, 0x63, 0x74, 0x6f, 0x70, 0x75, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_octopus_proto_rawDescOnce sync.Once
	file_octopus_proto_rawDescData = file_octopus_proto_rawDesc
)

func file_octopus_proto_rawDescGZIP() []byte {
	file_octopus_proto_rawDescOnce.Do(func() {
		file_octopus_proto_rawDescData = protoimpl.X.CompressGZIP(file_octopus_proto_rawDescData)
	})
	return file_octopus_proto_rawDescData
}

var file_octopus_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_octopus_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_octopus_proto_goTypes = []interface{}{
	(CableEndpointType)(0),   // 0: cloudflare.net.octopus.CableEndpointType
	(*Topology)(nil),         // 1: cloudflare.net.octopus.Topology
	(*Site)(nil),             // 2: cloudflare.net.octopus.Site
	(*Pop)(nil),              // 3: cloudflare.net.octopus.Pop
	(*Colo)(nil),             // 4: cloudflare.net.octopus.Colo
	(*Device)(nil),           // 5: cloudflare.net.octopus.Device
	(*Interface)(nil),        // 6: cloudflare.net.octopus.Interface
	(*FrontPort)(nil),        // 7: cloudflare.net.octopus.FrontPort
	(*RearPort)(nil),         // 8: cloudflare.net.octopus.RearPort
	(*InterfaceUnit)(nil),    // 9: cloudflare.net.octopus.InterfaceUnit
	(*IPAddress)(nil),        // 10: cloudflare.net.octopus.IPAddress
	(*Circuit)(nil),          // 11: cloudflare.net.octopus.Circuit
	(*Cable)(nil),            // 12: cloudflare.net.octopus.Cable
	(*CableEnd)(nil),         // 13: cloudflare.net.octopus.CableEnd
	(*Prefix)(nil),           // 14: cloudflare.net.octopus.Prefix
	(*MetaData)(nil),         // 15: cloudflare.net.octopus.MetaData
	(*TopologyRequest)(nil),  // 16: cloudflare.net.octopus.TopologyRequest
	(*TopologyResponse)(nil), // 17: cloudflare.net.octopus.TopologyResponse
	(*DeviceRequest)(nil),    // 18: cloudflare.net.octopus.DeviceRequest
	(*DeviceResponse)(nil),   // 19: cloudflare.net.octopus.DeviceResponse
	nil,                      // 20: cloudflare.net.octopus.MetaData.SemanticTagsEntry
	(*api.Prefix)(nil),       // 21: bio.net.Prefix
}
var file_octopus_proto_depIdxs = []int32{
	2,  // 0: cloudflare.net.octopus.Topology.sites:type_name -> cloudflare.net.octopus.Site
	3,  // 1: cloudflare.net.octopus.Topology.pops:type_name -> cloudflare.net.octopus.Pop
	4,  // 2: cloudflare.net.octopus.Topology.colos:type_name -> cloudflare.net.octopus.Colo
	5,  // 3: cloudflare.net.octopus.Topology.devices:type_name -> cloudflare.net.octopus.Device
	12, // 4: cloudflare.net.octopus.Topology.cables:type_name -> cloudflare.net.octopus.Cable
	14, // 5: cloudflare.net.octopus.Topology.prefixes:type_name -> cloudflare.net.octopus.Prefix
	11, // 6: cloudflare.net.octopus.Topology.circuits:type_name -> cloudflare.net.octopus.Circuit
	6,  // 7: cloudflare.net.octopus.Device.interfaces:type_name -> cloudflare.net.octopus.Interface
	7,  // 8: cloudflare.net.octopus.Device.front_ports:type_name -> cloudflare.net.octopus.FrontPort
	8,  // 9: cloudflare.net.octopus.Device.rear_ports:type_name -> cloudflare.net.octopus.RearPort
	15, // 10: cloudflare.net.octopus.Device.meta_data:type_name -> cloudflare.net.octopus.MetaData
	9,  // 11: cloudflare.net.octopus.Interface.units:type_name -> cloudflare.net.octopus.InterfaceUnit
	15, // 12: cloudflare.net.octopus.Interface.meta_data:type_name -> cloudflare.net.octopus.MetaData
	10, // 13: cloudflare.net.octopus.InterfaceUnit.ipv4_addresses:type_name -> cloudflare.net.octopus.IPAddress
	10, // 14: cloudflare.net.octopus.InterfaceUnit.ipv6_addresses:type_name -> cloudflare.net.octopus.IPAddress
	15, // 15: cloudflare.net.octopus.InterfaceUnit.meta_data:type_name -> cloudflare.net.octopus.MetaData
	21, // 16: cloudflare.net.octopus.IPAddress.IP:type_name -> bio.net.Prefix
	15, // 17: cloudflare.net.octopus.IPAddress.meta_data:type_name -> cloudflare.net.octopus.MetaData
	15, // 18: cloudflare.net.octopus.Circuit.meta_data:type_name -> cloudflare.net.octopus.MetaData
	13, // 19: cloudflare.net.octopus.Cable.a_end:type_name -> cloudflare.net.octopus.CableEnd
	13, // 20: cloudflare.net.octopus.Cable.b_end:type_name -> cloudflare.net.octopus.CableEnd
	0,  // 21: cloudflare.net.octopus.CableEnd.endpoint_type:type_name -> cloudflare.net.octopus.CableEndpointType
	21, // 22: cloudflare.net.octopus.Prefix.prefix:type_name -> bio.net.Prefix
	15, // 23: cloudflare.net.octopus.Prefix.meta_data:type_name -> cloudflare.net.octopus.MetaData
	20, // 24: cloudflare.net.octopus.MetaData.semantic_tags:type_name -> cloudflare.net.octopus.MetaData.SemanticTagsEntry
	1,  // 25: cloudflare.net.octopus.TopologyResponse.topology:type_name -> cloudflare.net.octopus.Topology
	5,  // 26: cloudflare.net.octopus.DeviceResponse.device:type_name -> cloudflare.net.octopus.Device
	16, // 27: cloudflare.net.octopus.OctopusService.GetTopology:input_type -> cloudflare.net.octopus.TopologyRequest
	18, // 28: cloudflare.net.octopus.OctopusService.GetDevice:input_type -> cloudflare.net.octopus.DeviceRequest
	17, // 29: cloudflare.net.octopus.OctopusService.GetTopology:output_type -> cloudflare.net.octopus.TopologyResponse
	19, // 30: cloudflare.net.octopus.OctopusService.GetDevice:output_type -> cloudflare.net.octopus.DeviceResponse
	29, // [29:31] is the sub-list for method output_type
	27, // [27:29] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_octopus_proto_init() }
func file_octopus_proto_init() {
	if File_octopus_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_octopus_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_octopus_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Site); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_octopus_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_octopus_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Colo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_octopus_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_octopus_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_octopus_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrontPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_octopus_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RearPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_octopus_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_octopus_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_octopus_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Circuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_octopus_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_octopus_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CableEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_octopus_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_octopus_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_octopus_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_octopus_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_octopus_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_octopus_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_octopus_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_octopus_proto_goTypes,
		DependencyIndexes: file_octopus_proto_depIdxs,
		EnumInfos:         file_octopus_proto_enumTypes,
		MessageInfos:      file_octopus_proto_msgTypes,
	}.Build()
	File_octopus_proto = out.File
	file_octopus_proto_rawDesc = nil
	file_octopus_proto_goTypes = nil
	file_octopus_proto_depIdxs = nil
}
